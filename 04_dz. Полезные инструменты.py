task = int(input('Запустить задачу номер: '))
if task == 1:
# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
    from sys import argv as params

    def calc(hour, salary, premium):
        result = (hour * salary) + premium
        return result

    if len(params) == 0:
        print('Введите параметры расчета')
    else:
        hour = params[1]
        salary = params[2]
        premium = params[3]
        print(f'Заработная плата сотрудника: {calc(int(hour), int(salary), int(premium))}')

elif task == 2:
    # 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
    # Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
    numbers = [1, 5, 2, 8, 3, 4, 9, 0, 8, 15, 11, 20, 15]
    print([num for i, num in enumerate(numbers) if numbers[i] > numbers[i - 1] and i != 0])

elif task == 3:
    # 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
    # Подсказка: использовать функцию range() и генератор.
    print([i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0])

elif task == 4:
    # 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
    # Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования
    # в исходном списке. Для выполнения задания обязательно использовать генератор.
    numbers = [1, 2, 5, 8, 1, 15, 3, 2, 10, 8, 9, 5, 8, 1]
    print([i for i in numbers if numbers.count(i) == 1])

elif task == 5:
    # 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
    # В список должны войти четные числа от 100 до 1000 (включая границы).
    # Необходимо получить результат вычисления произведения всех элементов списка.
    # Подсказка: использовать функцию reduce().
    from functools import reduce

    def my_f(num1, num2):
        return num1 * num2

    num = [i for i in range(100, 1001) if i % 2 == 0]
    print(reduce(my_f, num))

elif task == 6:
    # 6. Реализовать два небольших скрипта:
    # а) итератор, генерирующий целые числа, начиная с указанного,
    # б) итератор, повторяющий элементы некоторого списка, определенного заранее.
    # Подсказка: использовать функцию count() и cycle() модуля itertools.
    # Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
    import itertools as it

    for i in it.count(10, 10):
        if i >= 100:
            break
        print(i)

    c = 0
    for i in it.cycle([1, 5, 6]):
        if c >= 9:
            break
        print(i)
        c += 1

elif task == 7:
    # 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
    # При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
    # Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел,
    # начиная с 1! и до n!.
    # Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
    from math import factorial
    from itertools import count

    def fibo_gen():
        for el in count(1):
            yield factorial(el)

    x = 0
    for i in fibo_gen():
        print('Factorial {} - {}'.format(x + 1, i))
        if x == 15:
            break
        x += 1